=== What are trees? ===
- Trees are a data structure that have a hierarchical structures 
  as opposed to linked lists and arrays which are liner
- The nodes can contain any type of information that we want

=== What is abstruct syntax tree? ===

=== What are Binary Trees? ===
- Each node can only have either zero, one or two nodes
- Each child can only have one parent
- Each node represents a certain state
- The number of nodes on the last level is equal to the sum of the number og nodes
  on all the other levels plus one
- Perfect Binary Tree
  - Everything is filled in
  - All the leaf nodes are full (have 2 children)
  - Perfect binary trees are very efficient and desiable
- Full Binary Tree
  - Each node has eitehr zero or two children but not one child

=== Misc ===
- Linked lista are also a type of trees
- There are so many different kinds of trees
- Devide and Conquer

=== Big O of Binary Trees ===
- lookup: O(log N) (If unbalanced binary tree... O(n))
- insert: O(log N) (O(n))
- delete: O(log N) (O(n))

=== How to calculate the number of nodes in a binary tree? ===
- Do 2 to the power of the level
- level 0: 2^0 = 1
- level 1: 2^1 = 2
- level 2: 2^2 = 4
- level 3: 2^3 = 8

# of nodes = 2^h - 1;
log nodes = steps

log 100 = 2
10^2 = 100;

=== What is O(logN)? ===
- 処理するたびにターゲットが絞られて速くなる魔法のようなオーダー

=== What are Binary Search Trees? ===
- they are good at searching
- they allow us to preserve relationships (parents and children, which node...)
- The rules of binary search Tree
  - 1. All child nodes in the tree to the right of the root node must be greater than the current node. if left it decreases
  - 2. Each node can only have up to two children because it's a binary tree

=== Why is unbalanced binary tree bad? ===
- it'll be O(log n) to O(n) (linear time)
- It will need to loop through every node to insert, lookup and delete

=== Pros and cons of Binary Search tree ===
- Pros
  - Better than O(n)
  - Ordered
  - Flexible Size... Because we can place the node anywhere in the memory
  - compared to hash tables? Data with binary search tree is sorted
- cons
  - No O(1) operations
  - BST is not the fastest for anything

=== AVL Trees & Red / Black Trees ===
  - These two are usually the most popular for balancing binary search trees
  - Balanced binary search trees are suitable to maintain O(log N) search time, otherwise it will be lenear (O(n))
  - What's AVT? Named after the inventors, Adelson-Velskii and Landis.

=== Binary Heap?? ===
  - It's good at doing comparative operaitons 
  - There are tqwo types, max heap and min heap
    - Max heap: parent node >= child node
    - Min heap: parent node <= child node
  - The left node doesn't have to be smaller than the right node, it doesn't matter
  - Binary heap is a type of data structure, it's nothing to do with memory heap

