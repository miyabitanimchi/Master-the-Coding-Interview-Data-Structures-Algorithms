=== Stacks and Queues ===
- They are both linear data structures, which allow us to traverse data sequentially one by one
- They are similar, the main difference is only how items get removed

=== Stacks ===
- They are like plates stacked on top of each other vertically
- Can only touch the top plate
- Called LIFO, last in, first out, because the last plate comes out first
- Stacks are used in such as browser history
- Methods
    - pop O(1)
    - push O(1)
    - peek O(1) ... view the top plate
    - (loopup O(n)) ... it's gonna be a heavy operation!

=== Queues ===
- The opposite of stacks, called FIFO, first in, first out
- Used in printers, waitlists, restaurant apps etc
- Methods
    - dequeue O(1) ...like shift
    - enqueue O(1) ...like push
    - peek O(1) ... view the first item
    - (loopup O(n)) ... it's gonna be a heavy operation!

=== Why we don't want to use arrays but stacks and queues? ===
- Because it's inefficient!
- if you shift or unshift item indexes needs to be shifted


=== How you implement Stacks and Queues ===
- Stacks
    - Both Arrays and Linked List work well
    - When accessing its items Arrays are faster vs Linked List because items are right next to each other
    - Since stacks have dynamic arrays, so we can keep adding items to the List
      Arrays have certain amount of memory, and when it reaches its limit it's going to have to double up that
      memory and create new space for it somewhere in the memory
- Queues
    - Using arrays is not a good idea because indices needs to be shifted
    - Use linked lists
    



=== MISC notes ===
- Most programming languages are modeled with the stack architecture in mind