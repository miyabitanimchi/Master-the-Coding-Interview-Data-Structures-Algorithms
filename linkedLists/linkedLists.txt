=== What is a Linked List? ===
- A list that is Linked
- Contains a set of nodes and think of nodes as these blocks
- The nodes have two elements
    - A value of data
    - A pointer to the next node in line
- The first node is called the head
- The last node is called the tail
- There is what people call "null terminated", the tail always points to null


there are 2 types:
- Singly Linked Lists
- Doubly Linked Lists




=== Why Linked Lists? ===
- My thought
    - We can keep the order
    - Because of the pointer, somehow we can grab the value we want easily?
    - Unlike arrays, we don't need to shift values when a new value is inserted

- Answers
    - When you look up or inserting an item let's say at the 5th place, if linked lists we start
      at the head and traverse the list until we get there (O(n))
      * Traverse... 横切る、横断する、（山などを）越える
      the idea is the same as we iterate through an array from an index 0 to n
    - linked lists and nodes are scattered all over the computer memory, like hash tables.
      But inserting an items in the middle of a linked list is a lot better than an array 



=== Big O og Linked Lists ===
- Prepend: O(1)
- Append: O(1)
- Lookup: O(n)
- Insert: O(n)
- Delete: O(n)


=== Doubly Linked Lists ===
- Doubly linked list allow us to traverse the list backwards
- They also point to the previous node


=== Downside of Doubly Linked Lists ===
- It requires a little more memory


=== Single vs Double? ===
- Single
  - Pros
    - Simple implementation
    - Requires less memory
    - 
  - Cons
    - Can not be iterated in reverse or traverse from back to front

- Double
  - Pros
    - Can be iterated in reverse or traverse from back to front
    - Can access to the previous node easily
  - Cons
    - Complex implementation
    - Requires more memory


=== Misc notes ===
- We'll use a while loop when coding with linked lists
    